<?php

namespace Tests\Feature;

use Corals\Modules\Utility\ListOfValue\Models\ListOfValue;
use Corals\Settings\Facades\Modules;
use Corals\User\Models\Role;
use Corals\User\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class UtilityListOfValueTest extends TestCase
{
    use DatabaseTransactions;

    protected $listOfValue = [];

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $role = Role::query()->whereHas('permissions', function ($queryRole) {
            $queryRole->where('name', 'Utility::listOfValue.create');
        })->first();

        $user = User::query()->whereHas('roles', function ($query) use ($role) {
            $query->where('name', $role->name);
        })->first();

        Auth::loginUsingId($user->id);
    }

    public function test_utility_list_of_value_store()
    {
        $modules = [
            'Marketplace' => 'corals-marketplace',
            'Classified' => 'corals-classified',
            'CMS' => 'corals-cms',
            'TroubleTicket' => 'corals-trouble-ticket',
            'Directory' => 'corals-directory',
        ];

        foreach ($modules as $module => $code) {
            if (Modules::isModuleActive($code)) {
                $response = $this->post('utilities/list-of-values', [
                    'code' => null,
                    'value' => 'parent',
                    'display_order' => random_int(1, 5),
                    'module' => $module,
                    'parent_id' => null,
                    'status' => 'active',]);

                $this->listOfValue = ListOfValue::query()->first();

                $response->assertRedirect('utilities/list-of-values');
            }
        }

        $this->assertTrue(true);
    }

    public function test_utility_list_of_value_edit()
    {
        if ($this->listOfValue) {
            $response = $this->get('utilities/list-of-values/' . $this->listOfValue->hashed_id . '/edit');

            $response->assertStatus(200)->assertViewIs('utility-lov::create_edit');
        }
        $this->assertTrue(true);
    }

    public function test_utility_list_of_value_update()
    {
        if ($this->listOfValue) {
            $response = $this->put('utilities/list-of-values/' . $this->listOfValue->hashed_id, [
                'code' => $this->listOfValue->code,
                'value' => 'child',
                'display_order' => $this->listOfValue->display_order,
                'module' => $this->listOfValue->module,
                'parent_id' => $this->listOfValue->parent_id,
                'status' => $this->listOfValue->status,]);


            $response->assertStatus(200)->assertRedirect('utilities/list-of-values');
        }
        $this->assertTrue(true);
    }

    public function test_utility_list_of_value_delete()
    {
        if ($this->listOfValue) {
            $response = $this->delete('utilities/list-of-values/' . $this->listOfValue->hashed_id);

            $response->assertStatus(200)->assertSeeText('List Of Value has been deleted successfully.');
        }
        $this->assertTrue(true);
    }
}
